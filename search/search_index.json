{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Modern API wrapper for Genshin Impact built on asyncio and pydantic . The primary focus of genshin.py is convenience. The entire project is fully type-hinted and abstracts a large amount of the api to be easier to use. Key features: All data is in the form of Pydantic Models which means full autocompletion and linter support. Requests are significantly faster thanks to proper usage of asyncio. Chinese and Engrish names returned by the API are renamed to simpler English fields. Supports the majority of the popular endpoints. Cleanly integrates with frameworks like FastAPI out of the box. Installation From PyPI: pip install genshin From github: pip install git+https://github.com/thesadru/genshin.py Requirements: Python 3.8+ aiohttp Pydantic Example A very simple example of how genshin.py would be used: import asyncio import genshin async def main (): cookies = { \"ltuid\" : 119480035 , \"ltoken\" : \"cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT\" } client = genshin . GenshinClient ( cookies ) data = await client . get_user ( 710785423 ) print ( f \"User has a total of { len ( data . characters ) } characters\" ) await client . close () asyncio . run ( main ())","title":"Overview"},{"location":"#overview","text":"Modern API wrapper for Genshin Impact built on asyncio and pydantic . The primary focus of genshin.py is convenience. The entire project is fully type-hinted and abstracts a large amount of the api to be easier to use. Key features: All data is in the form of Pydantic Models which means full autocompletion and linter support. Requests are significantly faster thanks to proper usage of asyncio. Chinese and Engrish names returned by the API are renamed to simpler English fields. Supports the majority of the popular endpoints. Cleanly integrates with frameworks like FastAPI out of the box.","title":"Overview"},{"location":"#installation","text":"From PyPI: pip install genshin From github: pip install git+https://github.com/thesadru/genshin.py","title":"Installation"},{"location":"#requirements","text":"Python 3.8+ aiohttp Pydantic","title":"Requirements:"},{"location":"#example","text":"A very simple example of how genshin.py would be used: import asyncio import genshin async def main (): cookies = { \"ltuid\" : 119480035 , \"ltoken\" : \"cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT\" } client = genshin . GenshinClient ( cookies ) data = await client . get_user ( 710785423 ) print ( f \"User has a total of { len ( data . characters ) } characters\" ) await client . close () asyncio . run ( main ())","title":"Example"},{"location":"authentication/","text":"Authentication Cookies Cookies are the default form of authentication over the majority of Mihoyo APIs. These are used in web events and hoyolab utilities such as the Battle Chronicle. The cookies used in these APIs are the same as the ones you use to log in to your hoyolab account and make payments. This means it's highly recommended to use your own cookies only for local testing and to create alt accounts for actual API requests. For authentication, you will need to send two cookies: ltuid and ltoken . ltuid is your hoyolab UID and ltoken is a unique token used for the actual authentication. Setting cookies There are several ways to set cookies but set_cookies is preferred. # set as an __init__ parameter client = genshin . GenshinClient ({ \"ltuid\" : ... , \"ltoken\" : ... }) # set dynamically client = genshin . GenshinClient () client . set_cookies ({ \"ltuid\" : ... , \"ltoken\" : ... }) # mapping client . set_cookies ( ltuid =... , ltoken =... ) # kwargs client . set_cookies ( \"ltuid=...; ltoken=...\" ) # cookie header How can I get my cookies? Go to hoyolab.com . Login to your account. Press F12 to open Inspect Mode (ie. Developer Tools). Go to Application , Cookies , https://www.hoyolab.com . Copy ltuid and ltoken . Setting cookies automatically For testing, you may want to use your own personal cookies. As long as you are logged into your account on one of your browsers, you can get these dynamically with genshin.get_browser_cookies() . Installation pip install genshin[cookies] Example # get cookies from a browser and set them client = genshin . GenshinClient () cookies = genshin . get_browser_cookies () client . set_cookies ( cookies ) # implicitly set browser cookies client = genshin . GenshinClient () client . set_browser_cookies () In case of conflicts/errors, you may specify the browser you want to use. cookies = genshin . get_browser_cookies ( \"chrome\" ) Details Sadly not even this is inconsistent enough. For some endpoints like redeem_code , you might need to set account_id and cookie_token cookies instead. You can get them by going to genshin.mihoyo.com . Authkey Authkeys are an alternative authentication used mostly for paginators like client.wish_history() and client.transaction_log() . They last only 24 hours, and it's impossible to do any write operations with them. That means authkeys, unlike cookies, are absolutely safe to share. These authkeys should always be a base64 encoded string and 1024 characters long. Setting authkeys Similar to cookies, you may set authkeys through multiple ways. # set as an __init__ parameter client = genshin . GenshinClient ( authkey = \"...\" ) # set dynamically client . authkey = \"...\" Since authkeys are safe to share, all functions which use authkeys also accept them as a parameter. client = genshin . GenshinClient () async for wish in client . wish_history ( authkey = \"...\" ): pass How can I get my authkey? To get your authkey manually from other platforms, you can use any of these approaches: PC Open the wish history in the game and wait for it to load Open the file at ~\\AppData\\LocalLow\\miHoYo\\Genshin Impact\\output_log.txt Find the link which starts with OnGetWebViewPageFinish and copy it Android Open the Paimon menu Click Feedback Wait for it to load, and a feedback page should open Turn off your Wi-Fi Refresh the page The page should display an error containing a link Copy the link PS Open any event mail which contains a QR Code Scan the QR Code with your phone Copy the link > You can only use this if you have an in-game mail with QR Code to open the web event After that, you can extract the authkey from the link using genshin.extract_authkey . url = \"https://webstatic-sea.mihoyo.com/ys/event/im-service/index.html?...\" authkey = genshin . extract_authkey ( url ) client = genshin . GenshinClient () client . authkey = authkey Setting authkeys automatically If you open a wish history or a wish details page in genshin, then the authkey will show up in your logfiles. It's possible to dynamically get the authkey using genshin.get_authkey() . # get the authkey from a logfile client = genshin . GenshinClient () client . authkey = genshin . get_authkey () # implicitly set the authkey client = genshin . GenshinClient () client . set_authkey ()","title":"Authentication"},{"location":"authentication/#authentication","text":"","title":"Authentication"},{"location":"authentication/#cookies","text":"Cookies are the default form of authentication over the majority of Mihoyo APIs. These are used in web events and hoyolab utilities such as the Battle Chronicle. The cookies used in these APIs are the same as the ones you use to log in to your hoyolab account and make payments. This means it's highly recommended to use your own cookies only for local testing and to create alt accounts for actual API requests. For authentication, you will need to send two cookies: ltuid and ltoken . ltuid is your hoyolab UID and ltoken is a unique token used for the actual authentication.","title":"Cookies"},{"location":"authentication/#setting-cookies","text":"There are several ways to set cookies but set_cookies is preferred. # set as an __init__ parameter client = genshin . GenshinClient ({ \"ltuid\" : ... , \"ltoken\" : ... }) # set dynamically client = genshin . GenshinClient () client . set_cookies ({ \"ltuid\" : ... , \"ltoken\" : ... }) # mapping client . set_cookies ( ltuid =... , ltoken =... ) # kwargs client . set_cookies ( \"ltuid=...; ltoken=...\" ) # cookie header","title":"Setting cookies"},{"location":"authentication/#how-can-i-get-my-cookies","text":"Go to hoyolab.com . Login to your account. Press F12 to open Inspect Mode (ie. Developer Tools). Go to Application , Cookies , https://www.hoyolab.com . Copy ltuid and ltoken .","title":"How can I get my cookies?"},{"location":"authentication/#setting-cookies-automatically","text":"For testing, you may want to use your own personal cookies. As long as you are logged into your account on one of your browsers, you can get these dynamically with genshin.get_browser_cookies() .","title":"Setting cookies automatically"},{"location":"authentication/#installation","text":"pip install genshin[cookies]","title":"Installation"},{"location":"authentication/#example","text":"# get cookies from a browser and set them client = genshin . GenshinClient () cookies = genshin . get_browser_cookies () client . set_cookies ( cookies ) # implicitly set browser cookies client = genshin . GenshinClient () client . set_browser_cookies () In case of conflicts/errors, you may specify the browser you want to use. cookies = genshin . get_browser_cookies ( \"chrome\" )","title":"Example"},{"location":"authentication/#details","text":"Sadly not even this is inconsistent enough. For some endpoints like redeem_code , you might need to set account_id and cookie_token cookies instead. You can get them by going to genshin.mihoyo.com .","title":"Details"},{"location":"authentication/#authkey","text":"Authkeys are an alternative authentication used mostly for paginators like client.wish_history() and client.transaction_log() . They last only 24 hours, and it's impossible to do any write operations with them. That means authkeys, unlike cookies, are absolutely safe to share. These authkeys should always be a base64 encoded string and 1024 characters long.","title":"Authkey"},{"location":"authentication/#setting-authkeys","text":"Similar to cookies, you may set authkeys through multiple ways. # set as an __init__ parameter client = genshin . GenshinClient ( authkey = \"...\" ) # set dynamically client . authkey = \"...\" Since authkeys are safe to share, all functions which use authkeys also accept them as a parameter. client = genshin . GenshinClient () async for wish in client . wish_history ( authkey = \"...\" ): pass","title":"Setting authkeys"},{"location":"authentication/#how-can-i-get-my-authkey","text":"To get your authkey manually from other platforms, you can use any of these approaches: PC Open the wish history in the game and wait for it to load Open the file at ~\\AppData\\LocalLow\\miHoYo\\Genshin Impact\\output_log.txt Find the link which starts with OnGetWebViewPageFinish and copy it Android Open the Paimon menu Click Feedback Wait for it to load, and a feedback page should open Turn off your Wi-Fi Refresh the page The page should display an error containing a link Copy the link PS Open any event mail which contains a QR Code Scan the QR Code with your phone Copy the link > You can only use this if you have an in-game mail with QR Code to open the web event After that, you can extract the authkey from the link using genshin.extract_authkey . url = \"https://webstatic-sea.mihoyo.com/ys/event/im-service/index.html?...\" authkey = genshin . extract_authkey ( url ) client = genshin . GenshinClient () client . authkey = authkey","title":"How can I get my authkey?"},{"location":"authentication/#setting-authkeys-automatically","text":"If you open a wish history or a wish details page in genshin, then the authkey will show up in your logfiles. It's possible to dynamically get the authkey using genshin.get_authkey() . # get the authkey from a logfile client = genshin . GenshinClient () client . authkey = genshin . get_authkey () # implicitly set the authkey client = genshin . GenshinClient () client . set_authkey ()","title":"Setting authkeys automatically"},{"location":"battle_chronicle/","text":"Battle Chronicle The main feature of genshin.py is the Battle Chronicle . It contains various features such as statistics, character equipment, spiral abyss runs, exploration progress, etc. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information. Quick example # get general user info: user = await client . get_user ( 710785423 ) # get spiral abyss runs: data = await client . get_spiral_abyss ( 710785423 , previous = True ) # get activities: data = await client . get_activities ( 710785423 ) Real-Time Notes Thanks to a relatively new feature added to battle chronicles you may now view your own resin count, explorations, comissions and similar data just using the API. Currently you may only get your own data using your own cookies but a uid is still required. notes = await client . get_notes ( 710785423 ) print ( f \"Resin: { notes . current_resin } / { notes . max_resin } \" ) print ( f \"Comissions: { notes . completed_comissions } / { notes . max_comissions } \" ) Optimizations Under the hood, get_user has to make two requests: one for the user and another for character equipment. If you do not care about character equipment, you should use get_partial_user . user = await client . get_partial_user ( 710785423 ) print ( user . stats . days_active ) On the other hand, if you want to request as much information as possible, you should use get_full_user which adds spiral abyss runs and activities to the user. user = await client . get_full_user ( 710785423 ) print ( user . abyss . previous . total_stars )","title":"Battle Chronicle"},{"location":"battle_chronicle/#battle-chronicle","text":"The main feature of genshin.py is the Battle Chronicle . It contains various features such as statistics, character equipment, spiral abyss runs, exploration progress, etc. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Battle Chronicle"},{"location":"battle_chronicle/#quick-example","text":"# get general user info: user = await client . get_user ( 710785423 ) # get spiral abyss runs: data = await client . get_spiral_abyss ( 710785423 , previous = True ) # get activities: data = await client . get_activities ( 710785423 )","title":"Quick example"},{"location":"battle_chronicle/#real-time-notes","text":"Thanks to a relatively new feature added to battle chronicles you may now view your own resin count, explorations, comissions and similar data just using the API. Currently you may only get your own data using your own cookies but a uid is still required. notes = await client . get_notes ( 710785423 ) print ( f \"Resin: { notes . current_resin } / { notes . max_resin } \" ) print ( f \"Comissions: { notes . completed_comissions } / { notes . max_comissions } \" )","title":"Real-Time Notes"},{"location":"battle_chronicle/#optimizations","text":"Under the hood, get_user has to make two requests: one for the user and another for character equipment. If you do not care about character equipment, you should use get_partial_user . user = await client . get_partial_user ( 710785423 ) print ( user . stats . days_active ) On the other hand, if you want to request as much information as possible, you should use get_full_user which adds spiral abyss runs and activities to the user. user = await client . get_full_user ( 710785423 ) print ( user . abyss . previous . total_stars )","title":"Optimizations"},{"location":"caching/","text":"Caching Genshin.py uses several caches: client.cache - A standard cache for http requests client.paginator_cache - A cache for individual paginator client.static_cache - A cache for static resources It is recommended to use cachetools to set your caches. Genshin.py has a builtin utility method to create caches for you. Installation pip install genshin[cache] Quick example # create a cache with a specific strategy client = genshin . GenshinClient () client . set_cache ( maxsize = 256 , strategy = \"LRU\" ) import cachetools client = genshin . GenshinClient () client . cache = cachetools . FIFOCache ( 16 ) # create a ttl cache with a 1h lifespan client = genshin . GenshinClient () client . set_cache ( maxsize = 256 , ttl = 3600 ) Paginator caches A paginator cache is used for wish history and transactions. The mapping used for this paginator must support frequent access since every single individual item will be stored separately for optimization. import cachetools client = genshin . GenshinClient () client . paginator_cache = LRUCache ( 2048 ) # A simple LRU cache is ideal Static caches Every request towards a static endpoint is cached. You may overwrite it with any other mapping but unless you're only trying to make the caching persistent there's generally no reason to. client = genshin . GenshinClient () items = await client . get_gacha_items () print ( len ( client . static_cache )) Custom caches Sometimes a simple mutable mapping won't do, for example with redis caches. In this case you can overwrite the caching methods of GenshinClient Example with aioredis: import aioredis import genshin import msgpack class RedisClient ( genshin . GenshinClient ): def __init__ ( self , ** kwargs ) -> None : super () . __init__ ( ** kwargs ) self . redis = aioredis . from_url ( \"redis://localhost\" ) async def _check_cache ( self , key , check , lang ): \"\"\"Check the cache for any entries\"\"\" key = \":\" . join ( map ( str , key + ( lang or self . lang ,))) data = await self . redis . get ( key ) if data is None : return None if check is None or check ( data ): return msgpack . unpackb ( data ) await self . redis . delete ( key ) return None async def _update_cache ( self , data , key , check = None , lang = None ) -> None : \"\"\"Update the cache with a new entry\"\"\" key = \":\" . join ( map ( str , key + ( lang or self . lang ,))) if check is not None and not check ( data ): return await self . redis . set ( key , msgpack . packb ( data ), ex = 3600 )","title":"Caching"},{"location":"caching/#caching","text":"Genshin.py uses several caches: client.cache - A standard cache for http requests client.paginator_cache - A cache for individual paginator client.static_cache - A cache for static resources It is recommended to use cachetools to set your caches. Genshin.py has a builtin utility method to create caches for you.","title":"Caching"},{"location":"caching/#installation","text":"pip install genshin[cache]","title":"Installation"},{"location":"caching/#quick-example","text":"# create a cache with a specific strategy client = genshin . GenshinClient () client . set_cache ( maxsize = 256 , strategy = \"LRU\" ) import cachetools client = genshin . GenshinClient () client . cache = cachetools . FIFOCache ( 16 ) # create a ttl cache with a 1h lifespan client = genshin . GenshinClient () client . set_cache ( maxsize = 256 , ttl = 3600 )","title":"Quick example"},{"location":"caching/#paginator-caches","text":"A paginator cache is used for wish history and transactions. The mapping used for this paginator must support frequent access since every single individual item will be stored separately for optimization. import cachetools client = genshin . GenshinClient () client . paginator_cache = LRUCache ( 2048 ) # A simple LRU cache is ideal","title":"Paginator caches"},{"location":"caching/#static-caches","text":"Every request towards a static endpoint is cached. You may overwrite it with any other mapping but unless you're only trying to make the caching persistent there's generally no reason to. client = genshin . GenshinClient () items = await client . get_gacha_items () print ( len ( client . static_cache ))","title":"Static caches"},{"location":"caching/#custom-caches","text":"Sometimes a simple mutable mapping won't do, for example with redis caches. In this case you can overwrite the caching methods of GenshinClient Example with aioredis: import aioredis import genshin import msgpack class RedisClient ( genshin . GenshinClient ): def __init__ ( self , ** kwargs ) -> None : super () . __init__ ( ** kwargs ) self . redis = aioredis . from_url ( \"redis://localhost\" ) async def _check_cache ( self , key , check , lang ): \"\"\"Check the cache for any entries\"\"\" key = \":\" . join ( map ( str , key + ( lang or self . lang ,))) data = await self . redis . get ( key ) if data is None : return None if check is None or check ( data ): return msgpack . unpackb ( data ) await self . redis . delete ( key ) return None async def _update_cache ( self , data , key , check = None , lang = None ) -> None : \"\"\"Update the cache with a new entry\"\"\" key = \":\" . join ( map ( str , key + ( lang or self . lang ,))) if check is not None and not check ( data ): return await self . redis . set ( key , msgpack . packb ( data ), ex = 3600 )","title":"Custom caches"},{"location":"calculator/","text":"Enhancment Progress Calculator A wrapper around the Genshin Impact Enhancment Progress Calculator page. Contains a database of all characters, weapons and artifacts. Also the only way to recieve talents. To request any of the calculator endpoints you must first be logged in. Refer to the authentication section for more information. Quick Example # get a list of all characters characters = await client . get_calculator_characters () # get a list of all weapons weapons = await client . get_calculator_weapons () # get a list of all artifacts artifacts = await client . get_calculator_artifacts () # search for a specific character/weapon/artifact characters = await client . get_calculator_characters ( query = \"Xi\" ) # filter the returned characters/weapons/artifacts weapons = await client . get_calculator_weapons ( rarities = [ 5 , 4 ]) # get all talents of a character talents = await client . get_character_talents ( 10000002 ) # get all other artifacts in a set artifacts = await client . get_complete_artifact_set ( 7554 ) # get a list of synced characters # only returns the characters you have and ensures all level fields are provided characters = await client . get_calculator_characters ( sync = True ) # get the details of a character # includes their weapon, artifacts and talents details = await client . get_character_details ( 10000002 ) Example Of Calculation Basic Calculation The calculator uses builders to set data. All methods return self so they're chainable. # create a builder object builder = client . calculator () # calculate resoources needed to level up Hu Tao from lvl 1 to lvl 90 builder . set_character ( 10000046 , current = 1 , target = 90 ) # calculate the amount of resources needed for a Staff of Homa from level 20 to level 70 builder . set_weapon ( 13501 , current = 20 , target = 70 ) # execute the builder cost = await builder . calculate () print ( cost ) # you may also chain the builder (recommended) cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . set_weapon ( 13501 , current = 20 , target = 70 ) ) # calculate the amount needed for a 5* gladiator's nostalgia artifact_id = 7554 cost = await ( client . calculator () . add_artifact ( artifact_id , current = 0 , target = 20 ) ) # or calculate for a full set cost = await ( client . calculator () . set_artifact_set ( artifact_id , current = 0 , target = 20 ) ) Calculation based off a character If we assume we're calculating resources for the currently logged in user we can simply get their weapon and artifact levels directly. # Let's use the currently equipped weapon, artifacts and talents cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . with_current_weapon ( target = 70 ) . with_current_artifacts ( target = 20 ) # every artifact will be set to lvl 20 . with_current_talents ( target = 7 ) # every artifact will be set to lvl 7 ) # you may want to upgrade only specific talent or artifact types cost = await ( client . calculator () . set_character ( 10000046 , current = 80 , target = 90 ) # upgrade only the flower and feather . with_current_artifacts ( flower = 16 , feather = 20 ) # upgrade only the burst . with_current_talents ( burst = 10 ) )","title":"Enhancment Progress Calculator"},{"location":"calculator/#enhancment-progress-calculator","text":"A wrapper around the Genshin Impact Enhancment Progress Calculator page. Contains a database of all characters, weapons and artifacts. Also the only way to recieve talents. To request any of the calculator endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Enhancment Progress Calculator"},{"location":"calculator/#quick-example","text":"# get a list of all characters characters = await client . get_calculator_characters () # get a list of all weapons weapons = await client . get_calculator_weapons () # get a list of all artifacts artifacts = await client . get_calculator_artifacts () # search for a specific character/weapon/artifact characters = await client . get_calculator_characters ( query = \"Xi\" ) # filter the returned characters/weapons/artifacts weapons = await client . get_calculator_weapons ( rarities = [ 5 , 4 ]) # get all talents of a character talents = await client . get_character_talents ( 10000002 ) # get all other artifacts in a set artifacts = await client . get_complete_artifact_set ( 7554 ) # get a list of synced characters # only returns the characters you have and ensures all level fields are provided characters = await client . get_calculator_characters ( sync = True ) # get the details of a character # includes their weapon, artifacts and talents details = await client . get_character_details ( 10000002 )","title":"Quick Example"},{"location":"calculator/#example-of-calculation","text":"","title":"Example Of Calculation"},{"location":"calculator/#basic-calculation","text":"The calculator uses builders to set data. All methods return self so they're chainable. # create a builder object builder = client . calculator () # calculate resoources needed to level up Hu Tao from lvl 1 to lvl 90 builder . set_character ( 10000046 , current = 1 , target = 90 ) # calculate the amount of resources needed for a Staff of Homa from level 20 to level 70 builder . set_weapon ( 13501 , current = 20 , target = 70 ) # execute the builder cost = await builder . calculate () print ( cost ) # you may also chain the builder (recommended) cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . set_weapon ( 13501 , current = 20 , target = 70 ) ) # calculate the amount needed for a 5* gladiator's nostalgia artifact_id = 7554 cost = await ( client . calculator () . add_artifact ( artifact_id , current = 0 , target = 20 ) ) # or calculate for a full set cost = await ( client . calculator () . set_artifact_set ( artifact_id , current = 0 , target = 20 ) )","title":"Basic Calculation"},{"location":"calculator/#calculation-based-off-a-character","text":"If we assume we're calculating resources for the currently logged in user we can simply get their weapon and artifact levels directly. # Let's use the currently equipped weapon, artifacts and talents cost = await ( client . calculator () . set_character ( 10000046 , current = 1 , target = 90 ) . with_current_weapon ( target = 70 ) . with_current_artifacts ( target = 20 ) # every artifact will be set to lvl 20 . with_current_talents ( target = 7 ) # every artifact will be set to lvl 7 ) # you may want to upgrade only specific talent or artifact types cost = await ( client . calculator () . set_character ( 10000046 , current = 80 , target = 90 ) # upgrade only the flower and feather . with_current_artifacts ( flower = 16 , feather = 20 ) # upgrade only the burst . with_current_talents ( burst = 10 ) )","title":"Calculation based off a character"},{"location":"chinese/","text":"Chinese API The chinese version of Genshin Impact uses a different API dubbed \u7c73\u6e38\u793e . Since the API significantly differs from the overseas one you must create a separate client for it. The Chinese client has almost the exact same usage, only the internals differ. Quick Example client = genshin . ChineseClient ({ \"ltuid\" : ... , \"ltoken\" : ... }) user = await client . get_user ( 101322963 ) Optimizations The daily reward claiming for chinese players is a bit different, it requires a uid of one of the user's genshin accounts. Genshin.py is able to get it by itself but you may want to set it yourself if you know it. reward = await client . claim_daily_reward ( 101322963 )","title":"Chinese API"},{"location":"chinese/#chinese-api","text":"The chinese version of Genshin Impact uses a different API dubbed \u7c73\u6e38\u793e . Since the API significantly differs from the overseas one you must create a separate client for it. The Chinese client has almost the exact same usage, only the internals differ.","title":"Chinese API"},{"location":"chinese/#quick-example","text":"client = genshin . ChineseClient ({ \"ltuid\" : ... , \"ltoken\" : ... }) user = await client . get_user ( 101322963 )","title":"Quick Example"},{"location":"chinese/#optimizations","text":"The daily reward claiming for chinese players is a bit different, it requires a uid of one of the user's genshin accounts. Genshin.py is able to get it by itself but you may want to set it yourself if you know it. reward = await client . claim_daily_reward ( 101322963 )","title":"Optimizations"},{"location":"cli/","text":"CLI Genshin.py is not only a library but also a CLI app. For it to work you must be logged into your genshin account on any of your browsers. (Refer to the authentication section for reasoning) Installation pip install genshin[cli] Usage Get help $ genshin --help Usage: genshin [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: accounts Get all of your genshin accounts characters Show the characters of a user notes Real-Time notes to see live genshin data pity Calculates the amount of pulls until pity stats Show simple statistics of a user wishes Get a nicely formatted wish history Run a command $ genshin -m genshin stats 710785423 User stats of 710785423 Stats: Achievements: 387 Days Active: 321 Characters: 28 Spiral Abyss: 11-3 Anemoculi: 66 Geoculi: 131 Electroculi: 180 Common Chests: 1076 Exquisite Chests: 880 Precious Chests: 246 Luxurious Chests: 103 Remarkable Chests: 42 Unlocked Waypoints: 136 Unlocked Domains: 31 Explorations Inazuma: explored 97.5% | Reputation level 10 Dragonspine: explored 95.3% | Offering level 12 Liyue: explored 93.0% | Reputation level 8 Mondstadt: explored 100.0% | Reputation level 8 Teapot level 9 | comfort 20920 (Fit for a King) Unlocked realms: Emerald Peak, Cool Isle","title":"CLI"},{"location":"cli/#cli","text":"Genshin.py is not only a library but also a CLI app. For it to work you must be logged into your genshin account on any of your browsers. (Refer to the authentication section for reasoning)","title":"CLI"},{"location":"cli/#installation","text":"pip install genshin[cli]","title":"Installation"},{"location":"cli/#usage","text":"","title":"Usage"},{"location":"cli/#get-help","text":"$ genshin --help Usage: genshin [OPTIONS] COMMAND [ARGS]... Options: --help Show this message and exit. Commands: accounts Get all of your genshin accounts characters Show the characters of a user notes Real-Time notes to see live genshin data pity Calculates the amount of pulls until pity stats Show simple statistics of a user wishes Get a nicely formatted wish history","title":"Get help"},{"location":"cli/#run-a-command","text":"$ genshin -m genshin stats 710785423 User stats of 710785423 Stats: Achievements: 387 Days Active: 321 Characters: 28 Spiral Abyss: 11-3 Anemoculi: 66 Geoculi: 131 Electroculi: 180 Common Chests: 1076 Exquisite Chests: 880 Precious Chests: 246 Luxurious Chests: 103 Remarkable Chests: 42 Unlocked Waypoints: 136 Unlocked Domains: 31 Explorations Inazuma: explored 97.5% | Reputation level 10 Dragonspine: explored 95.3% | Offering level 12 Liyue: explored 93.0% | Reputation level 8 Mondstadt: explored 100.0% | Reputation level 8 Teapot level 9 | comfort 20920 (Fit for a King) Unlocked realms: Emerald Peak, Cool Isle","title":"Run a command"},{"location":"credits/","text":"Credits Thanks to these amazing people genshin.py can be where it is now: Womsxd : The author of YuanShen User Info - a predecesor to genshinstats Lightczx : The author of Snap.Genshin , helped me figure out the chinese endpoints Pokurt - Helped with capturing the requests coming from the hoyolab android app. GrassSand & molehzy : Provided me with working chinese cookies to test chinese endpoints. lulu666lulu : Figured out how the chinese dynamic secret is generated Chizy : Keeping me sane throughout the entire development process And finally me :) - thesadru","title":"Credits"},{"location":"credits/#credits","text":"Thanks to these amazing people genshin.py can be where it is now: Womsxd : The author of YuanShen User Info - a predecesor to genshinstats Lightczx : The author of Snap.Genshin , helped me figure out the chinese endpoints Pokurt - Helped with capturing the requests coming from the hoyolab android app. GrassSand & molehzy : Provided me with working chinese cookies to test chinese endpoints. lulu666lulu : Figured out how the chinese dynamic secret is generated Chizy : Keeping me sane throughout the entire development process And finally me :) - thesadru","title":"Credits"},{"location":"daily_rewards/","text":"Daily Rewards Since genshin forces users to claim their daily rewards through the website we can abuse that system and claim rewards automatically. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information. Quick Example # claim daily reward try : reward = await client . claim_daily_reward () except genshin . AlreadyClaimed : print ( \"Daily reward already claimed\" ) else : print ( f \"Claimed { reward . amount } x { reward . name } \" ) # get all claimed rewards async for reward in client . claimed_rewards (): print ( f \" { reward . time } - { reward . amount } x { reward . name } \" ) # get info about the current daily reward status signed_in , claimed_rewards = await client . get_reward_info () print ( f \"Signed in: { 'yes' if signed_in else 'no' } | Total claimed rewards: { claimed_rewards } \" ) Optimizations Under the hood, client.claim_daily_reward makes an additional request to get the claimed reward. If you don't want that you may disable the extra request with client.claim_daily_reward(reward=False)","title":"Daily Rewards"},{"location":"daily_rewards/#daily-rewards","text":"Since genshin forces users to claim their daily rewards through the website we can abuse that system and claim rewards automatically. To request any of the Battle Chronicle endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Daily Rewards"},{"location":"daily_rewards/#quick-example","text":"# claim daily reward try : reward = await client . claim_daily_reward () except genshin . AlreadyClaimed : print ( \"Daily reward already claimed\" ) else : print ( f \"Claimed { reward . amount } x { reward . name } \" ) # get all claimed rewards async for reward in client . claimed_rewards (): print ( f \" { reward . time } - { reward . amount } x { reward . name } \" ) # get info about the current daily reward status signed_in , claimed_rewards = await client . get_reward_info () print ( f \"Signed in: { 'yes' if signed_in else 'no' } | Total claimed rewards: { claimed_rewards } \" )","title":"Quick Example"},{"location":"daily_rewards/#optimizations","text":"Under the hood, client.claim_daily_reward makes an additional request to get the claimed reward. If you don't want that you may disable the extra request with client.claim_daily_reward(reward=False)","title":"Optimizations"},{"location":"debugging/","text":"Debugging Interactive console Since genshin.py uses asyncio it's fairly hard to debug code in the interactive console. Instead I highly recommend you use IPython . Requests Genshin.py automatically logs all requests using the logging module. You can make these logs show up in the console by setting the debug kwarg to True In [1]: client = genshin.GenshinClient({...}, debug=True) In [2]: user = await client.get_user(710785423) DEBUG:genshin.client:GET https://bbs-api-os.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423 DEBUG:genshin.client:POST https://bbs-api-os.mihoyo.com/game_record/genshin/api/character {\"character_ids\":[10000003,10000006,10000007,10000014,10000015,10000020,10000021,10000023,10000024,10000025],\"role_id\":710785423,\"server\":\"os_euro\"}","title":"Debugging"},{"location":"debugging/#debugging","text":"","title":"Debugging"},{"location":"debugging/#interactive-console","text":"Since genshin.py uses asyncio it's fairly hard to debug code in the interactive console. Instead I highly recommend you use IPython .","title":"Interactive console"},{"location":"debugging/#requests","text":"Genshin.py automatically logs all requests using the logging module. You can make these logs show up in the console by setting the debug kwarg to True In [1]: client = genshin.GenshinClient({...}, debug=True) In [2]: user = await client.get_user(710785423) DEBUG:genshin.client:GET https://bbs-api-os.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423 DEBUG:genshin.client:POST https://bbs-api-os.mihoyo.com/game_record/genshin/api/character {\"character_ids\":[10000003,10000006,10000007,10000014,10000015,10000020,10000021,10000023,10000024,10000025],\"role_id\":710785423,\"server\":\"os_euro\"}","title":"Requests"},{"location":"diary/","text":"Traveler's Diary Contains statistics of the earned primogems and mora in the last 3 months. To request any of the diary endpoints you must first be logged in. Refer to the authentication section for more information. Quick Example # get the diary diary = await client . get_diary () print ( f \"Primogems earned this month: { diary . data . current_primogems } \" ) for category in diary . data . categories : print ( f \" { category . percentage } % earned from { category . name } ( { category . amount } primogems)\" ) # get the log of actions which earned primogems async for action in client . diary_log ( limit = 50 ): print ( f \" { action . action } - { action . amount } primogems\" ) # get the diary log for mora async for action in client . diary_log ( mora = True , limit = 50 ): print ( f \" { action . action } - { action . amount } mora\" )","title":"Traveler's Diary"},{"location":"diary/#travelers-diary","text":"Contains statistics of the earned primogems and mora in the last 3 months. To request any of the diary endpoints you must first be logged in. Refer to the authentication section for more information.","title":"Traveler's Diary"},{"location":"diary/#quick-example","text":"# get the diary diary = await client . get_diary () print ( f \"Primogems earned this month: { diary . data . current_primogems } \" ) for category in diary . data . categories : print ( f \" { category . percentage } % earned from { category . name } ( { category . amount } primogems)\" ) # get the log of actions which earned primogems async for action in client . diary_log ( limit = 50 ): print ( f \" { action . action } - { action . amount } primogems\" ) # get the diary log for mora async for action in client . diary_log ( mora = True , limit = 50 ): print ( f \" { action . action } - { action . amount } mora\" )","title":"Quick Example"},{"location":"doc/","text":"Api Documentation Api documentation has been moved to pdoc","title":"Api Documentation"},{"location":"doc/#api-documentation","text":"Api documentation has been moved to pdoc","title":"Api Documentation"},{"location":"genshin_api/","text":"Genshin API For anyone wanting to make their own project which interacts with the api you may use this as a reference guide. I will cover mainly the overseas api here. Game Record Game Record, Battle Chronicle on hoyolab, refers to a collection of statistics of genshin impact players. You may view it here: https://webstatic-sea.hoyolab.com/app/community-game-records-sea/ Internally, this page requests resources from https://api-os-takumi.mihoyo.com/game_record/genshin/api/ Request You are required to provide 4 headers: x-rpc-language - The chosen language in iso format (english is en-us) x-rpc-app_version - The api version you're using (currently 1.5.0) x-rpc-client_type - The device type which requested the endpoint (desktop is 5) ds - The dynamic secret In addition to that you must provide your own user cookies. These can either be a pair of ltuid and ltoken or a pair of account_id and cookie_token . To select a user you're requesting you must provide their uid and server. Parameters role_ud The user's in-game uid server The server a player belongs to, can be figured out from the first digit in the uid 6XXXXXXXX = os_usa 7XXXXXXXX = os_euro 8XXXXXXXX = os_asia 9XXXXXXXX = os_cht Dynamic secret To generate the dynamic secret you must use the current time, a 6 character long string and a unique salt. Then generate the secret from its md5 hash. Dynamic secrets last for an hour so you should create a new one for each request. python example: import time , hashlib def generate_ds (): salt = \"6cqshh5dhw73bzxn20oexa9k516chk7s\" # a platform-specific salt, this one is for desktop (5) t = int ( time . time ()) # the current unix time in seconds r = \"ABCDEF\" # a 6 long random string, must match [a-zA-Z0-9] # generate a hash from these variables and get its hex digest h = hashlib . md5 ( f \"salt= { salt } &t= { t } &r= { r } \" . encode ()) . hexdigest () # join everything together so the server can validate them return f \" { t } , { r } , { h } \" The ds salt had to be reverse-engineered from the hoyolab frontend source code. Your best bet is just always using this one and not worying about where it's from. Example Request curl: curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035' python: url = 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423' headers = { 'x-rpc-language' : 'en-us' , 'x-rpc-app_version' : '1.5.0' , 'x-rpc-client_type' : '5' , 'ds' : '1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' , 'cookie' : 'ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035' , } response = requests . get ( url , headers = headers ) Response The response is always a json object. On success the data is returned in the data field, on failure a message and a retcode is given. Example Response structure Success: { \"data\" : { <da ta > }, \"message\" : \"OK\" , \"retcode\" : 0 } Failure: { \"data\" : null , \"message\" : \"An error occured.\" , \"retcode\" : 10000 } Endpoints index Basic user info. method: GET endpoint: https://api-os-takumi.mihoyo.com/game_record/genshin/api/index params: server role_id curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035' character Character data. Unlike the rest of endpoints, this endpoint uses the body instead. The fields are the same as parameters with the addition of character_ids , that is a list of character ids that the api should return. This request should be made after requesting the index so you can get a list of all character ids a user owns. method: POST endpoint: https://api-os-takumi.mihoyo.com/game_record/genshin/api/character body: { \"character_ids\": [...], \"role_id\": ..., \"server\": ... } curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/character' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035' -d '{\"character_ids\":[10000026, 10000030, 10000041], \"role_id\":\"710785423\", \"server\":\"os_euro\"}' spiralAbyss Spiral abyss runs. This endpoint has an additional optional param called schedule_type , this can either be 1 if you're requesting the current season or 2 if you're requesting the previous season. method: POST endpoint: https://api-os-takumi.mihoyo.com/game_record/genshin/api/spiralAbyss params: server role_id schedule_type curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423&schedule_type=2' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035'","title":"Genshin API"},{"location":"genshin_api/#genshin-api","text":"For anyone wanting to make their own project which interacts with the api you may use this as a reference guide. I will cover mainly the overseas api here.","title":"Genshin API"},{"location":"genshin_api/#game-record","text":"Game Record, Battle Chronicle on hoyolab, refers to a collection of statistics of genshin impact players. You may view it here: https://webstatic-sea.hoyolab.com/app/community-game-records-sea/ Internally, this page requests resources from https://api-os-takumi.mihoyo.com/game_record/genshin/api/","title":"Game Record"},{"location":"genshin_api/#request","text":"You are required to provide 4 headers: x-rpc-language - The chosen language in iso format (english is en-us) x-rpc-app_version - The api version you're using (currently 1.5.0) x-rpc-client_type - The device type which requested the endpoint (desktop is 5) ds - The dynamic secret In addition to that you must provide your own user cookies. These can either be a pair of ltuid and ltoken or a pair of account_id and cookie_token . To select a user you're requesting you must provide their uid and server.","title":"Request"},{"location":"genshin_api/#parameters","text":"","title":"Parameters"},{"location":"genshin_api/#role_ud","text":"The user's in-game uid","title":"role_ud"},{"location":"genshin_api/#server","text":"The server a player belongs to, can be figured out from the first digit in the uid 6XXXXXXXX = os_usa 7XXXXXXXX = os_euro 8XXXXXXXX = os_asia 9XXXXXXXX = os_cht","title":"server"},{"location":"genshin_api/#dynamic-secret","text":"To generate the dynamic secret you must use the current time, a 6 character long string and a unique salt. Then generate the secret from its md5 hash. Dynamic secrets last for an hour so you should create a new one for each request. python example: import time , hashlib def generate_ds (): salt = \"6cqshh5dhw73bzxn20oexa9k516chk7s\" # a platform-specific salt, this one is for desktop (5) t = int ( time . time ()) # the current unix time in seconds r = \"ABCDEF\" # a 6 long random string, must match [a-zA-Z0-9] # generate a hash from these variables and get its hex digest h = hashlib . md5 ( f \"salt= { salt } &t= { t } &r= { r } \" . encode ()) . hexdigest () # join everything together so the server can validate them return f \" { t } , { r } , { h } \" The ds salt had to be reverse-engineered from the hoyolab frontend source code. Your best bet is just always using this one and not worying about where it's from.","title":"Dynamic secret"},{"location":"genshin_api/#example-request","text":"curl: curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035' python: url = 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423' headers = { 'x-rpc-language' : 'en-us' , 'x-rpc-app_version' : '1.5.0' , 'x-rpc-client_type' : '5' , 'ds' : '1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' , 'cookie' : 'ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035' , } response = requests . get ( url , headers = headers )","title":"Example Request"},{"location":"genshin_api/#response","text":"The response is always a json object. On success the data is returned in the data field, on failure a message and a retcode is given.","title":"Response"},{"location":"genshin_api/#example-response-structure","text":"Success: { \"data\" : { <da ta > }, \"message\" : \"OK\" , \"retcode\" : 0 } Failure: { \"data\" : null , \"message\" : \"An error occured.\" , \"retcode\" : 10000 }","title":"Example Response structure"},{"location":"genshin_api/#endpoints","text":"","title":"Endpoints"},{"location":"genshin_api/#index","text":"Basic user info. method: GET endpoint: https://api-os-takumi.mihoyo.com/game_record/genshin/api/index params: server role_id curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035'","title":"index"},{"location":"genshin_api/#character","text":"Character data. Unlike the rest of endpoints, this endpoint uses the body instead. The fields are the same as parameters with the addition of character_ids , that is a list of character ids that the api should return. This request should be made after requesting the index so you can get a list of all character ids a user owns. method: POST endpoint: https://api-os-takumi.mihoyo.com/game_record/genshin/api/character body: { \"character_ids\": [...], \"role_id\": ..., \"server\": ... } curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/character' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035' -d '{\"character_ids\":[10000026, 10000030, 10000041], \"role_id\":\"710785423\", \"server\":\"os_euro\"}'","title":"character"},{"location":"genshin_api/#spiralabyss","text":"Spiral abyss runs. This endpoint has an additional optional param called schedule_type , this can either be 1 if you're requesting the current season or 2 if you're requesting the previous season. method: POST endpoint: https://api-os-takumi.mihoyo.com/game_record/genshin/api/spiralAbyss params: server role_id schedule_type curl 'https://api-os-takumi.mihoyo.com/game_record/genshin/api/index?server=os_euro&role_id=710785423&schedule_type=2' \\ -H 'x-rpc-language: en-us' \\ -H 'x-rpc-app_version: 1.5.0' \\ -H 'x-rpc-client_type: 5' \\ -H 'ds: 1634484774,8BKDa5,9b54d31e1a410907605852c4c8d16e8a' \\ -H 'cookie: ltoken=cnF7TiZqHAAvYqgCBoSPx5EjwezOh1ZHoqSHf7dT; ltuid=119480035'","title":"spiralAbyss"},{"location":"hoyolab/","text":"Hoyolab Since the api genshin.py is requesting is made primarily for hoyolab some minor utility functions related to it are also supported. Quick example # get the uid, nickname and level of a user from a hoyolab uid card = await client . get_record_card ( 8366222 ) print ( card . uid , card . level , card . nickname ) # list of all genshin accounts of the currently logged-in user accounts = await client . genshin_accounts () for account in accounts : print ( account . uid , account . level , account . nickname ) # redeem a gift code for the currently logged-in user await client . redeem_code ( \"GENSHINGIFT\" ) # search users users = await client . search_users ( \"sadru\" ) print ( users [ 0 ] . hoyolab_uid ) # get a list of random recommended users (useful for data gathering) users = await client . get_recommended_users () print ( users [ 0 ] . hoyolab_uid ) # to actually get any useful data: # card = await client.get_record_card(users[0].hoyolab_uid)","title":"Hoyolab"},{"location":"hoyolab/#hoyolab","text":"Since the api genshin.py is requesting is made primarily for hoyolab some minor utility functions related to it are also supported.","title":"Hoyolab"},{"location":"hoyolab/#quick-example","text":"# get the uid, nickname and level of a user from a hoyolab uid card = await client . get_record_card ( 8366222 ) print ( card . uid , card . level , card . nickname ) # list of all genshin accounts of the currently logged-in user accounts = await client . genshin_accounts () for account in accounts : print ( account . uid , account . level , account . nickname ) # redeem a gift code for the currently logged-in user await client . redeem_code ( \"GENSHINGIFT\" ) # search users users = await client . search_users ( \"sadru\" ) print ( users [ 0 ] . hoyolab_uid ) # get a list of random recommended users (useful for data gathering) users = await client . get_recommended_users () print ( users [ 0 ] . hoyolab_uid ) # to actually get any useful data: # card = await client.get_record_card(users[0].hoyolab_uid)","title":"Quick example"},{"location":"langs/","text":"Support other languages The api supports several languages. You can set what language you want the response to be in by either changing the client language client.lang or passing the language as a method argument The default language is English - en-us Quick example client = genshin . GenshinClient ( lang = \"fr-fr\" ) user = await client . get_user ( 710785423 ) client = genshin . GenshinClient () client . lang = \"ko-kr\" user = await client . get_user ( 710785423 ) client = genshin . GenshinClient () user = await client . get_user ( 710785423 , lang = \"zh-tw\" ) Supported Llanguages This list may be gotten with genshin.LANGS Code Language de-de Deutsch en-us English es-es Espa\u00f1ol fr-fr Fran\u00e7ais id-id Indonesia ja-jp \u65e5\u672c\u8a9e ko-kr \ud55c\uad6d\uc5b4 pt-pt Portugu\u00eas ru-ru P\u0443\u0441\u0441\u043a\u0438\u0439 th-th \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 vi-vn Ti\u1ebfng Vi\u1ec7t zh-cn \u7b80\u4f53\u4e2d\u6587 zh-tw \u7e41\u9ad4\u4e2d\u6587","title":"Support other languages"},{"location":"langs/#support-other-languages","text":"The api supports several languages. You can set what language you want the response to be in by either changing the client language client.lang or passing the language as a method argument The default language is English - en-us","title":"Support other languages"},{"location":"langs/#quick-example","text":"client = genshin . GenshinClient ( lang = \"fr-fr\" ) user = await client . get_user ( 710785423 ) client = genshin . GenshinClient () client . lang = \"ko-kr\" user = await client . get_user ( 710785423 ) client = genshin . GenshinClient () user = await client . get_user ( 710785423 , lang = \"zh-tw\" )","title":"Quick example"},{"location":"langs/#supported-llanguages","text":"This list may be gotten with genshin.LANGS Code Language de-de Deutsch en-us English es-es Espa\u00f1ol fr-fr Fran\u00e7ais id-id Indonesia ja-jp \u65e5\u672c\u8a9e ko-kr \ud55c\uad6d\uc5b4 pt-pt Portugu\u00eas ru-ru P\u0443\u0441\u0441\u043a\u0438\u0439 th-th \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22 vi-vn Ti\u1ebfng Vi\u1ec7t zh-cn \u7b80\u4f53\u4e2d\u6587 zh-tw \u7e41\u9ad4\u4e2d\u6587","title":"Supported Llanguages"},{"location":"multicookie/","text":"Multi-Cookie Clients Mihoyo has very strict ratelimits in place. You are allowed to only request data for 30 users per day. This means most projects are practically unusable with a single cookie. To solve this issue you may set multiple cookies at once using genshin.MultiCookieClient . This client requires a list of cookies instead of a dict. Whenever a cookie hits its ratelimit a different one is used. Since creating multiple alt accounts to get your cookies is a slow and tedious process you may try any of the countless automated account creates such as thesadru/genshin-account-creator . Quick example. client = genshin . MultiCookieClient () client . set_cookies ([{ ... }, { ... }, ... ]) user = await client . get_user ( 710785423 )","title":"Multi-Cookie Clients"},{"location":"multicookie/#multi-cookie-clients","text":"Mihoyo has very strict ratelimits in place. You are allowed to only request data for 30 users per day. This means most projects are practically unusable with a single cookie. To solve this issue you may set multiple cookies at once using genshin.MultiCookieClient . This client requires a list of cookies instead of a dict. Whenever a cookie hits its ratelimit a different one is used. Since creating multiple alt accounts to get your cookies is a slow and tedious process you may try any of the countless automated account creates such as thesadru/genshin-account-creator .","title":"Multi-Cookie Clients"},{"location":"multicookie/#quick-example","text":"client = genshin . MultiCookieClient () client . set_cookies ([{ ... }, { ... }, ... ]) user = await client . get_user ( 710785423 )","title":"Quick example."},{"location":"transactions/","text":"Transactions Contains logs of changes to primogems, crystals, resin, artifacts and weapons. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information. Transaction kinds: kind item description primogem Primogem rewards from daily comissions and events crystal Crystals gotten from top-up purchases resin Resin lost by claiming boss/domain/leyline rewards artifact Artifacts gained from domains or used as level up material weapon Weapons gained from wishes or used as level up material Quick example # iterate over the logs for primogems async for trans in client . transaction_log ( \"primogem\" ): print ( trans ) # set a limit for the iteration async for trans in client . transaction_log ( \"primogem\" , limit = 100 ): print ( trans ) # get and flatten the logs for resin log = await client . transaction_log ( \"resin\" , limit = 100 ) . flatten () print ( log [ - 1 ] . time ) # get the first log for artifacts trans = await client . transaction_log ( \"artifact\" ) . first () print ( trans . name ) # get multiple transaction kinds combined together async for trans in client . transaction_log ([ \"artifact\" , \"weapon\" ]): print ( trans ) # get all transaction kinds combined together async for trans in client . transaction_log ( limit = 20 ): print ( trans )","title":"Transactions"},{"location":"transactions/#transactions","text":"Contains logs of changes to primogems, crystals, resin, artifacts and weapons. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information. Transaction kinds: kind item description primogem Primogem rewards from daily comissions and events crystal Crystals gotten from top-up purchases resin Resin lost by claiming boss/domain/leyline rewards artifact Artifacts gained from domains or used as level up material weapon Weapons gained from wishes or used as level up material","title":"Transactions"},{"location":"transactions/#quick-example","text":"# iterate over the logs for primogems async for trans in client . transaction_log ( \"primogem\" ): print ( trans ) # set a limit for the iteration async for trans in client . transaction_log ( \"primogem\" , limit = 100 ): print ( trans ) # get and flatten the logs for resin log = await client . transaction_log ( \"resin\" , limit = 100 ) . flatten () print ( log [ - 1 ] . time ) # get the first log for artifacts trans = await client . transaction_log ( \"artifact\" ) . first () print ( trans . name ) # get multiple transaction kinds combined together async for trans in client . transaction_log ([ \"artifact\" , \"weapon\" ]): print ( trans ) # get all transaction kinds combined together async for trans in client . transaction_log ( limit = 20 ): print ( trans )","title":"Quick example"},{"location":"wish_history/","text":"Wish History Contains the wish history and banner details. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information. Quick example # simply iterate over the wish history async for wish in client . wish_history (): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # set a limit for the iteration async for wish in client . wish_history ( limit = 100 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get and flatten the wish history history = await client . wish_history ( limit = 100 ) . flatten () print ( history [ - 1 ] . time ) # get the first wish in the paginator (most recent one) wish = await client . wish_history () . first () print ( wish . uid ) Filtering data by banner By default client.wish_history() gets data from all banners, you can filter the results by passing in a banner id. You may also call client.get_banner_names() to get the banner names in various languages. Banner ID Novice Wishes 100 Permanent Wish 200 Character Event Wish 301 Weapon Event Wish 302 # get wishes only from the permanent banner async for wish in client . wish_history ( 200 , limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get wishes from both the character and the weapon banner async for wish in client . wish_history ([ 301 , 302 ], limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) Banner Details In the same way you can get data for your wish history you may also get data for the static banner details. Quick example # get all the current banners banners = await client . get_banner_details () for banner in banners : print ( banner . name ) # get a list of all items that can be gotten from the gacha items = await client . get_gacha_items () Optimizations You may start from any point in the paginator as long as you know the id of the previous item. async for wish in client . wish_history ( limit = 20 ): print ( wish ) async for wish in client . wish_history ( limit = 20 , end_id = wish . id ): print ( wish ) When getting data from a single banner you may use the next_page method to get the next 20 items in the paginator. # a more accurate progress bar history = client . wish_history ( 200 ) while not history . exhausted : page = await history . next_page () print ( '.' , end = '' ) get_banner_details requires ids to get the banner details. These ids change with every new banner so for user experience they are hosted on a remote repository maintained by me. In case you want to get proper data before I update the ids you may simply just get them yourself by openning every single details page in genshin and then running genshin.get_banner_ids() banner_ids = genshin . get_banner_ids () banners = await client . get_banner_details ( banner_ids )","title":"Wish History"},{"location":"wish_history/#wish-history","text":"Contains the wish history and banner details. To request any of the wish history endpoints you must set an authkey. Refer to the authentication section for more information.","title":"Wish History"},{"location":"wish_history/#quick-example","text":"# simply iterate over the wish history async for wish in client . wish_history (): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # set a limit for the iteration async for wish in client . wish_history ( limit = 100 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get and flatten the wish history history = await client . wish_history ( limit = 100 ) . flatten () print ( history [ - 1 ] . time ) # get the first wish in the paginator (most recent one) wish = await client . wish_history () . first () print ( wish . uid )","title":"Quick example"},{"location":"wish_history/#filtering-data-by-banner","text":"By default client.wish_history() gets data from all banners, you can filter the results by passing in a banner id. You may also call client.get_banner_names() to get the banner names in various languages. Banner ID Novice Wishes 100 Permanent Wish 200 Character Event Wish 301 Weapon Event Wish 302 # get wishes only from the permanent banner async for wish in client . wish_history ( 200 , limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" ) # get wishes from both the character and the weapon banner async for wish in client . wish_history ([ 301 , 302 ], limit = 20 ): print ( f \" { wish . time } - { wish . name } ( { wish . rarity } * { wish . type } )\" )","title":"Filtering data by banner"},{"location":"wish_history/#banner-details","text":"In the same way you can get data for your wish history you may also get data for the static banner details.","title":"Banner Details"},{"location":"wish_history/#quick-example_1","text":"# get all the current banners banners = await client . get_banner_details () for banner in banners : print ( banner . name ) # get a list of all items that can be gotten from the gacha items = await client . get_gacha_items ()","title":"Quick example"},{"location":"wish_history/#optimizations","text":"You may start from any point in the paginator as long as you know the id of the previous item. async for wish in client . wish_history ( limit = 20 ): print ( wish ) async for wish in client . wish_history ( limit = 20 , end_id = wish . id ): print ( wish ) When getting data from a single banner you may use the next_page method to get the next 20 items in the paginator. # a more accurate progress bar history = client . wish_history ( 200 ) while not history . exhausted : page = await history . next_page () print ( '.' , end = '' ) get_banner_details requires ids to get the banner details. These ids change with every new banner so for user experience they are hosted on a remote repository maintained by me. In case you want to get proper data before I update the ids you may simply just get them yourself by openning every single details page in genshin and then running genshin.get_banner_ids() banner_ids = genshin . get_banner_ids () banners = await client . get_banner_details ( banner_ids )","title":"Optimizations"}]}